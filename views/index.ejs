<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Image Scanner</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }
        
        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }
        
        .modal-content {
            margin: 5% auto;
            display: block;
            width: 90%;
            max-width: 600px;
            padding: 20px;
            background-color: #fefefe;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            animation: modalopen 0.3s ease-out;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            line-height: 1;
        }
        
        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
        
        @keyframes modalopen {
            from {opacity: 0; transform: translateY(-50px);}
            to {opacity: 1; transform: translateY(0);}
        }

        #video {
            width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 15px;
            background-color: #000;
        }
        
        button {
            padding: 12px 24px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            font-weight: 500;
            width: 100%;
            margin-bottom: 10px;
        }
        
        button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }
        
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            transform: none;
        }
        
        .export-btn {
            background-color: #28a745;
        }
        
        .export-btn:hover {
            background-color: #218838;
        }
        
        .clear-btn {
            background-color: #dc3545;
        }
        
        .clear-btn:hover {
            background-color: #c82333;
        }
        
        .input-box {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            box-sizing: border-box;
            margin-bottom: 15px;
            transition: border-color 0.3s ease;
        }
        
        .input-box::placeholder {
            color: #999;
        }
        
        .input-box:focus {
            outline: none;
            border-color: #007bff;
        }
        
        .captured-images {
            margin-top: 20px;
        }
        
        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .image-item {
            position: relative;
            border: 2px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            background-color: #f8f9fa;
        }
        
        .image-item img {
            width: 100%;
            height: 120px;
            object-fit: cover;
        }
        
        .image-item .image-name {
            padding: 8px;
            font-size: 12px;
            font-weight: 500;
            color: #333;
            text-align: center;
            background-color: #f8f9fa;
            border-top: 1px solid #ddd;
        }
        
        .image-item .delete-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .stats {
            background-color: #e9ecef;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .stats h3 {
            margin: 0 0 10px 0;
            color: #495057;
        }
        
        .stats span {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì∏ Multi-Image Scanner</h1>
        
        <div class="stats">
            <h3>Captured Images</h3>
            <span id="imageCount">0</span>
        </div>
        
        <video id="video" autoplay playsinline></video>
        
        <button onclick="capturePhoto()">üì∑ Capture Photo</button>
        <button class="export-btn" onclick="exportToZip()" id="exportBtn" disabled>üì¶ Export to ZIP</button>
        <button class="clear-btn" onclick="clearAllImages()" id="clearBtn" disabled>üóëÔ∏è Clear All Images</button>
        
        <div class="captured-images">
            <h3>Captured Images:</h3>
            <div id="imageGrid" class="image-grid"></div>
        </div>
    </div>

    <!-- Modal dialog for displaying captured photo and asking for name -->
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">√ó</span>
            <h3>üìù Name Your Photo</h3>
            <img id="capturedPhoto" src="" alt="Captured Photo" style="max-width: 100%; border-radius: 6px; margin-bottom: 15px;">
            <input type="text" class="input-box" id="photoName" placeholder="Enter photo name (e.g., document_1)">
            <button onclick="submitPhoto()">‚úÖ Save Photo</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script>
        const video = document.getElementById('video');
        const modal = document.getElementById('myModal');
        const capturedPhoto = document.getElementById('capturedPhoto');
        const imageGrid = document.getElementById('imageGrid');
        const imageCount = document.getElementById('imageCount');
        const exportBtn = document.getElementById('exportBtn');
        const clearBtn = document.getElementById('clearBtn');
        
        let capturedImages = [];
        let currentPhotoData = null;

        // Access the back camera
        async function accessBackCamera() {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const backCamera = devices.find(device => 
                    device.kind === 'videoinput' && 
                    (device.label.toLowerCase().includes('back') || device.label.toLowerCase().includes('rear'))
                );
                
                const constraints = {
                    video: {
                        deviceId: backCamera ? { exact: backCamera.deviceId } : undefined,
                        facingMode: backCamera ? undefined : { ideal: 'environment' },
                        width: { ideal: 400 },
                        height: { ideal: 500 }
                    }
                };
                
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                video.srcObject = stream;
            } catch (err) {
                console.error('Access to camera was denied', err);
                alert('Camera access denied. Please allow camera access to use this feature.');
            }
        }

        // Capture photo
        function capturePhoto() {
            const canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            
            // Store the photo data
            currentPhotoData = canvas.toDataURL('image/jpeg', 0.8);
            capturedPhoto.src = currentPhotoData;
            
            // Generate default name
            const defaultName = `image_${capturedImages.length + 1}`;
            document.getElementById('photoName').value = defaultName;
            
            modal.style.display = 'block';
        }

        // Submit photo
        function submitPhoto() {
            const photoName = document.getElementById('photoName').value.trim();
            if (!photoName) {
                alert('Please enter a photo name');
                return;
            }
            
            if (!currentPhotoData) {
                alert('No photo captured');
                return;
            }
            
            // Check for duplicate names
            if (capturedImages.some(img => img.name === photoName)) {
                alert('This name already exists. Please choose a different name.');
                return;
            }
            
            // Add to captured images array
            capturedImages.push({
                name: photoName,
                data: currentPhotoData,
                timestamp: new Date().toISOString()
            });
            
            updateImageGrid();
            updateStats();
            closeModal();
        }

        // Update image grid display
        function updateImageGrid() {
            imageGrid.innerHTML = '';
            
            capturedImages.forEach((image, index) => {
                const imageItem = document.createElement('div');
                imageItem.className = 'image-item';
                
                imageItem.innerHTML = `
                    <button class="delete-btn" onclick="deleteImage(${index})">√ó</button>
                    <img src="${image.data}" alt="${image.name}">
                    <div class="image-name">${image.name}</div>
                `;
                
                imageGrid.appendChild(imageItem);
            });
        }

        // Delete single image
        function deleteImage(index) {
            if (confirm('Are you sure you want to delete this image?')) {
                capturedImages.splice(index, 1);
                updateImageGrid();
                updateStats();
            }
        }

        // Clear all images
        function clearAllImages() {
            if (capturedImages.length === 0) return;
            
            if (confirm(`Are you sure you want to delete all ${capturedImages.length} images?`)) {
                capturedImages = [];
                updateImageGrid();
                updateStats();
            }
        }

        // Update statistics and button states
        function updateStats() {
            const count = capturedImages.length;
            imageCount.textContent = count;
            
            exportBtn.disabled = count === 0;
            clearBtn.disabled = count === 0;
        }

        // Export to ZIP
        async function exportToZip() {
            if (capturedImages.length === 0) {
                alert('No images to export');
                return;
            }
            
            exportBtn.disabled = true;
            exportBtn.textContent = 'üì¶ Creating ZIP...';
            
            try {
                const zip = new JSZip();
                
                capturedImages.forEach((image, index) => {
                    // Convert data URL to blob
                    const base64Data = image.data.split(',')[1];
                    zip.file(`${image.name}.jpg`, base64Data, { base64: true });
                });
                
                // Generate ZIP file
                const zipBlob = await zip.generateAsync({ type: 'blob' });
                
                // Create download link
                const link = document.createElement('a');
                link.href = URL.createObjectURL(zipBlob);
                link.download = `scanned_images_${new Date().toISOString().split('T')[0]}.zip`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // Clean up
                URL.revokeObjectURL(link.href);
                
            } catch (error) {
                console.error('Error creating ZIP:', error);
                alert('Error creating ZIP file. Please try again.');
            } finally {
                exportBtn.disabled = false;
                exportBtn.textContent = 'üì¶ Export to ZIP';
            }
        }

        // Close modal
        function closeModal() {
            modal.style.display = 'none';
            currentPhotoData = null;
            document.getElementById('photoName').value = '';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target === modal) {
                closeModal();
            }
        }

        // Initialize camera when page loads
        window.addEventListener('DOMContentLoaded', () => {
            accessBackCamera();
            updateStats();
        });
    </script>
</body>
</html>
